<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Academic | Lera Lidzhieva</title>
    <link>https://ldlidzhieva.github.io/en/tags/academic/</link>
      <atom:link href="https://ldlidzhieva.github.io/en/tags/academic/index.xml" rel="self" type="application/rss+xml" />
    <description>Academic</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Sat, 21 Jun 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://ldlidzhieva.github.io/media/icon_hu_645fa481986063ef.png</url>
      <title>Academic</title>
      <link>https://ldlidzhieva.github.io/en/tags/academic/</link>
    </image>
    
    <item>
      <title>Week 4</title>
      <link>https://ldlidzhieva.github.io/en/post/04/</link>
      <pubDate>Sat, 21 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://ldlidzhieva.github.io/en/post/04/</guid>
      <description>&lt;h2 id=&#34;-study-week-june-1521&#34;&gt;🧠 Study Week: June 15–21&lt;/h2&gt;
&lt;p&gt;I passed the &lt;strong&gt;Mathematical Logic exam&lt;/strong&gt;! 🎉 It was challenging, but I managed to get through it. Reviewing the material with the instructor really helped — almost half of the topics overlapped with the exam.&lt;/p&gt;
&lt;p&gt;📝 What was included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;working with propositional logic;&lt;/li&gt;
&lt;li&gt;transforming logical formulas;&lt;/li&gt;
&lt;li&gt;checking the satisfiability of logical expressions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logic has now become one of my favorite subjects! I’m even thinking about exploring formal systems and the application of logic in programming more deeply.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Study Effectively</title>
      <link>https://ldlidzhieva.github.io/en/publication/05/</link>
      <pubDate>Wed, 18 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://ldlidzhieva.github.io/en/publication/05/</guid>
      <description>&lt;h2 id=&#34;-how-to-study-effectively-techniques-that-actually-work&#34;&gt;🧠 How to Study Effectively: Techniques That Actually Work&lt;/h2&gt;
&lt;p&gt;University life is more than just lectures and exams. It’s a constant process of &lt;strong&gt;finding your rhythm, your methods, and the best way to absorb knowledge&lt;/strong&gt;. During my first year, I tried different approaches — and here are the ones that really worked for me.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-1-the-pomodoro-technique&#34;&gt;🕒 1. The Pomodoro Technique&lt;/h3&gt;
&lt;p&gt;The idea is to work for &lt;strong&gt;25 minutes&lt;/strong&gt; without distractions, followed by a &lt;strong&gt;5-minute break&lt;/strong&gt;. After four cycles, take a longer rest.&lt;/p&gt;
&lt;p&gt;This method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prevents burnout;&lt;/li&gt;
&lt;li&gt;creates a sense of progress;&lt;/li&gt;
&lt;li&gt;helps avoid distractions like social media.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-2-handwritten-notes&#34;&gt;✍️ 2. Handwritten Notes&lt;/h3&gt;
&lt;p&gt;Even if typing seems faster, &lt;strong&gt;handwritten notes are better for memory&lt;/strong&gt;. I keep a separate notebook for each subject, where I try to &lt;strong&gt;rephrase content in my own words&lt;/strong&gt; instead of just copying from the board.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-3-active-recall&#34;&gt;📚 3. Active Recall&lt;/h3&gt;
&lt;p&gt;Simply rereading lectures isn&amp;rsquo;t very effective. Instead, try to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;quiz yourself on the material;&lt;/li&gt;
&lt;li&gt;explain it out loud (even to yourself);&lt;/li&gt;
&lt;li&gt;use flashcards with questions and answers.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-4-weekly-planning&#34;&gt;📅 4. Weekly Planning&lt;/h3&gt;
&lt;p&gt;Every Sunday, I prepare a &lt;strong&gt;weekly plan&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what topics to study;&lt;/li&gt;
&lt;li&gt;what assignments are due;&lt;/li&gt;
&lt;li&gt;which deadlines are coming up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This reduces stress and helps avoid last-minute cramming.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-5-studying-with-others&#34;&gt;🤝 5. Studying with Others&lt;/h3&gt;
&lt;p&gt;Discussing topics with classmates is a great way to test how well you &lt;strong&gt;actually understand&lt;/strong&gt; something. If you can explain it to someone else — you’ve truly learned it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-conclusion&#34;&gt;📌 Conclusion&lt;/h2&gt;
&lt;p&gt;Effective studying isn’t about cramming all night. It’s about &lt;strong&gt;consistency, awareness, and finding what works for you&lt;/strong&gt;. Try different techniques, experiment, and build your own rhythm. And remember — &lt;strong&gt;quality matters more than quantity&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested, I can share my planning templates and note-taking strategies — just reach out!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week 3</title>
      <link>https://ldlidzhieva.github.io/en/post/03/</link>
      <pubDate>Sat, 14 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://ldlidzhieva.github.io/en/post/03/</guid>
      <description>&lt;h2 id=&#34;-study-week-june-814&#34;&gt;📙 Study Week: June 8–14&lt;/h2&gt;
&lt;p&gt;This week was all about &lt;strong&gt;logic&lt;/strong&gt;. I’ve been actively preparing for the upcoming &lt;strong&gt;Mathematical Logic exam&lt;/strong&gt;. We’re covering statements, quantifiers, and predicate calculus.&lt;/p&gt;
&lt;p&gt;📖 What I found especially interesting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;building truth tables;&lt;/li&gt;
&lt;li&gt;transforming formulas into DNF and CNF;&lt;/li&gt;
&lt;li&gt;constructing proofs using resolution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I started a dedicated notebook for logic schemes and formulas. It’s fascinating how logic sharpens abstract thinking. I really enjoyed the problems that require proving contradictions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scientific Programming Languages</title>
      <link>https://ldlidzhieva.github.io/en/publication/04/</link>
      <pubDate>Fri, 06 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://ldlidzhieva.github.io/en/publication/04/</guid>
      <description>&lt;h2 id=&#34;-scientific-programming-languages-what-are-they-and-why-do-they-matter&#34;&gt;🔬 Scientific Programming Languages: What Are They and Why Do They Matter?&lt;/h2&gt;
&lt;p&gt;When we talk about &lt;strong&gt;scientific programming&lt;/strong&gt;, we refer to writing programs that solve &lt;strong&gt;mathematical, physical, engineering, and statistical problems&lt;/strong&gt;. It’s less about websites or apps, and more about computation, data analysis, and modeling.&lt;/p&gt;
&lt;p&gt;These tasks require languages that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;offer high numerical precision,&lt;/li&gt;
&lt;li&gt;support complex numerical libraries,&lt;/li&gt;
&lt;li&gt;are convenient for visualizing data and mathematical expressions.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-most-popular-languages-in-scientific-fields&#34;&gt;💻 Most Popular Languages in Scientific Fields&lt;/h3&gt;
&lt;h4 id=&#34;1-python&#34;&gt;1. &lt;strong&gt;Python&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The most widely used language in the scientific community.&lt;/li&gt;
&lt;li&gt;Easy to learn and has a rich ecosystem: &lt;code&gt;NumPy&lt;/code&gt;, &lt;code&gt;SciPy&lt;/code&gt;, &lt;code&gt;Matplotlib&lt;/code&gt;, &lt;code&gt;Pandas&lt;/code&gt;, &lt;code&gt;SymPy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Used for numerical computation, data analysis, machine learning, and simulation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-matlab&#34;&gt;2. &lt;strong&gt;MATLAB&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A proprietary language aimed at engineers and physicists.&lt;/li&gt;
&lt;li&gt;Excellent for working with matrices, signals, and data visualization.&lt;/li&gt;
&lt;li&gt;Very handy in research tasks, though limited by licensing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-r&#34;&gt;3. &lt;strong&gt;R&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Specialized in statistics and data analysis.&lt;/li&gt;
&lt;li&gt;Common in bioinformatics, economics, and sociology.&lt;/li&gt;
&lt;li&gt;Offers many packages for visualization and statistical modeling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-julia&#34;&gt;4. &lt;strong&gt;Julia&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A modern language combining C-like speed with Python-like simplicity.&lt;/li&gt;
&lt;li&gt;Ideal for high-performance computing and large datasets.&lt;/li&gt;
&lt;li&gt;Rapidly growing in the scientific community.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-fortran&#34;&gt;5. &lt;strong&gt;Fortran&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;One of the oldest languages, still widely used in meteorology, aerodynamics, and physical process modeling.&lt;/li&gt;
&lt;li&gt;Extremely optimized for numerical computation, especially in high-performance computing (HPC).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-why-not-always-use-c&#34;&gt;🧠 Why Not Always Use C++?&lt;/h3&gt;
&lt;p&gt;While &lt;strong&gt;C++&lt;/strong&gt; is powerful and versatile, it demands more time for setup and development. In scientific research, &lt;strong&gt;speed of experimentation&lt;/strong&gt; often outweighs raw performance. That’s why high-level languages like Python, MATLAB, and R are preferred where &lt;strong&gt;flexibility and ease of use&lt;/strong&gt; are crucial.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-where-are-scientific-programming-languages-used&#34;&gt;🧪 Where Are Scientific Programming Languages Used?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mathematical modeling (e.g., simulating particle systems or economic behavior)&lt;/li&gt;
&lt;li&gt;Big data analysis&lt;/li&gt;
&lt;li&gt;Biostatistics and clinical research&lt;/li&gt;
&lt;li&gt;Physics, chemistry, ecology — modeling of complex systems&lt;/li&gt;
&lt;li&gt;Machine learning and artificial intelligence&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-conclusion&#34;&gt;📌 Conclusion&lt;/h2&gt;
&lt;p&gt;Scientific programming bridges theory, mathematics, and real-world application. Language choice depends on your goals: Python is versatile, MATLAB is precise, Julia is promising, R is statistical, and Fortran remains a giant in numerical accuracy.&lt;/p&gt;
&lt;p&gt;If you want to dive into scientific development — start with Python. It’s a powerful foundation for analysis, modeling, and research.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Create Effective Presentations</title>
      <link>https://ldlidzhieva.github.io/en/publication/03/</link>
      <pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://ldlidzhieva.github.io/en/publication/03/</guid>
      <description>&lt;h2 id=&#34;-creating-presentations-from-slides-to-meaning&#34;&gt;🎤 Creating Presentations: From Slides to Meaning&lt;/h2&gt;
&lt;p&gt;A presentation is not just a collection of slides. It’s a way to &lt;strong&gt;convey an idea, present a project, or tell your story&lt;/strong&gt;. A good presentation not only helps visualize information but also structures your thinking.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-where-to-start&#34;&gt;🧠 Where to Start?&lt;/h3&gt;
&lt;p&gt;Before opening PowerPoint or Google Slides, ask yourself three questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Who is your audience?&lt;/strong&gt; Teachers, classmates, potential clients?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What is your main message?&lt;/strong&gt; Keep it clear and focused.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How much time do you have?&lt;/strong&gt; Your talk’s structure depends on the time available.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-structure-of-an-effective-presentation&#34;&gt;📐 Structure of an Effective Presentation&lt;/h3&gt;
&lt;p&gt;A strong presentation typically includes three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the purpose, topic, and relevance;&lt;/li&gt;
&lt;li&gt;what the audience will learn.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Main Part&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;logical flow and visual support;&lt;/li&gt;
&lt;li&gt;arguments, charts, and diagrams;&lt;/li&gt;
&lt;li&gt;minimal text, maximum clarity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a short summary;&lt;/li&gt;
&lt;li&gt;why it matters;&lt;/li&gt;
&lt;li&gt;possible directions or next steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-visual-principles&#34;&gt;🎨 Visual Principles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use a &lt;strong&gt;consistent style&lt;/strong&gt;: colors, fonts, spacing.&lt;/li&gt;
&lt;li&gt;One slide = &lt;strong&gt;one main idea&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Avoid text overload: slides should &lt;strong&gt;support&lt;/strong&gt;, not replace your speech.&lt;/li&gt;
&lt;li&gt;Enhance your points with &lt;strong&gt;visual elements&lt;/strong&gt;: diagrams, icons, or illustrations.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;contrast&lt;/strong&gt; to emphasize key points and guide attention.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-during-the-presentation&#34;&gt;🔊 During the Presentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Don’t read the slide — &lt;strong&gt;tell a story&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Maintain a steady pace: speak clearly and don’t rush.&lt;/li&gt;
&lt;li&gt;Make &lt;strong&gt;smooth transitions&lt;/strong&gt; between sections to keep the audience engaged.&lt;/li&gt;
&lt;li&gt;Maintain eye contact (if in-person).&lt;/li&gt;
&lt;li&gt;Prepare for questions — and don’t worry if you don’t know everything.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-helpful-tips&#34;&gt;📌 Helpful Tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Practice is essential.&lt;/strong&gt; Rehearse in front of a mirror, record yourself, and trim the excess.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t overcomplicate.&lt;/strong&gt; Simple slides are more effective.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t be afraid to use humor&lt;/strong&gt;, real-life examples, or analogies — it makes your talk more relatable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Answer the key question: “So what?”&lt;/strong&gt; — why does this matter and who benefits from it?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-conclusion&#34;&gt;✅ Conclusion&lt;/h2&gt;
&lt;p&gt;Presentation-making is a skill that helps in studies, internships, and professional life. It’s not just about design — it’s about &lt;strong&gt;clear thinking and persuasive communication&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The more you present, the more confident you become. And each talk is a step toward developing your communication and analytical skills.&lt;/p&gt;
&lt;p&gt;Want to practice? Start with a presentation on a topic you love. Share your thoughts — clearly, brightly, and with purpose!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week 2</title>
      <link>https://ldlidzhieva.github.io/en/post/02/</link>
      <pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://ldlidzhieva.github.io/en/post/02/</guid>
      <description>&lt;h2 id=&#34;-study-week-june-17&#34;&gt;📘 Study Week: June 1–7&lt;/h2&gt;
&lt;p&gt;I spent the entire week preparing for the &lt;strong&gt;Calculus exam&lt;/strong&gt;, which took place on Friday. It&amp;rsquo;s the most difficult subject for me — especially topics like limits and derivatives.&lt;/p&gt;
&lt;p&gt;📌 What was on the exam:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calculating limits of complex functions;&lt;/li&gt;
&lt;li&gt;applying L&amp;rsquo;Hôpital&amp;rsquo;s rule;&lt;/li&gt;
&lt;li&gt;finding extrema;&lt;/li&gt;
&lt;li&gt;proving the convergence of sequences.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the exam, I realized that consistent practice is the key to success. I wrote out notes by hand — it really helps to internalize the theorems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lightweight Markup Languages — Clear and Simple</title>
      <link>https://ldlidzhieva.github.io/en/publication/02/</link>
      <pubDate>Sat, 31 May 2025 00:00:00 +0000</pubDate>
      <guid>https://ldlidzhieva.github.io/en/publication/02/</guid>
      <description>&lt;h2 id=&#34;-what-are-lightweight-markup-languages&#34;&gt;📝 What Are Lightweight Markup Languages?&lt;/h2&gt;
&lt;p&gt;Lightweight markup languages are simplified syntax systems that allow you to format text without complex tags or bulky structure. They make it easy to create structured documents — headings, lists, links, tables — all in plain, readable text using any basic editor.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-why-use-them&#34;&gt;🔍 Why Use Them?&lt;/h3&gt;
&lt;p&gt;Lightweight markup languages are especially popular among:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;developers&lt;/strong&gt; who write documentation;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;students&lt;/strong&gt; preparing reports and papers;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bloggers&lt;/strong&gt; and &lt;strong&gt;technical writers&lt;/strong&gt; running websites and wikis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They save time and remove the need for knowing HTML or LaTeX — it’s fast and easy to learn.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-popular-markup-languages&#34;&gt;💡 Popular Markup Languages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; — the most widely used. Simple and intuitive. Found everywhere from GitHub to academic blogs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reStructuredText (reST)&lt;/strong&gt; — common in Python project documentation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AsciiDoc&lt;/strong&gt; — more complex than Markdown but more flexible; ideal for professional tech docs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Textile&lt;/strong&gt; — easy to learn, used in older wiki systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Org-mode&lt;/strong&gt; — a powerful format for Emacs users that combines markup, planning, and code blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-where-are-they-used&#34;&gt;📌 Where Are They Used?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GitHub and GitLab&lt;/strong&gt; use Markdown for README files and issue descriptions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blog platforms and CMS&lt;/strong&gt; allow writing in Markdown or its variants.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scientific and open-source projects&lt;/strong&gt; often use reST or AsciiDoc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal corporate wikis&lt;/strong&gt; are increasingly switching from HTML to lightweight formats.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-advantages&#34;&gt;🧠 Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;📦 Compact — files remain readable without rendering.&lt;/li&gt;
&lt;li&gt;✍️ Easy to learn — can be mastered in an evening.&lt;/li&gt;
&lt;li&gt;💾 Cross-platform — works on any device or editor.&lt;/li&gt;
&lt;li&gt;🔄 Compatible — easily converted to PDF, HTML, DOCX, and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-conclusion&#34;&gt;🎯 Conclusion&lt;/h2&gt;
&lt;p&gt;Lightweight markup languages aren’t just convenient ways to format text — they’re essential skills for modern students and developers. They speed up work, simplify knowledge sharing, and make content accessible to everyone.&lt;/p&gt;
&lt;p&gt;If you haven’t tried one yet — start with Markdown. It’s a small investment of time that pays off across projects, documents, and learning materials.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is CI/CD</title>
      <link>https://ldlidzhieva.github.io/en/publication/01/</link>
      <pubDate>Mon, 26 May 2025 00:00:00 +0000</pubDate>
      <guid>https://ldlidzhieva.github.io/en/publication/01/</guid>
      <description>&lt;h2 id=&#34;-cicd-continuous-integration-and-deployment--explained-simply&#34;&gt;🚀 CI/CD: Continuous Integration and Deployment — Explained Simply&lt;/h2&gt;
&lt;p&gt;When a development team works on code, issues often arise: someone breaks a feature, someone else&amp;rsquo;s version doesn’t compile, or dependencies differ. To prevent this kind of chaos, we use the &lt;strong&gt;CI/CD&lt;/strong&gt; approach.&lt;/p&gt;
&lt;h3 id=&#34;-what-is-cicd&#34;&gt;🔧 What is CI/CD?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CI (Continuous Integration)&lt;/strong&gt; — is a practice where developers regularly merge their code into the main project branch. Each commit is automatically checked: tests run, the project builds, and the code quality is verified.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CD (Continuous Delivery/Deployment)&lt;/strong&gt; — automates the process of delivering code to production. New features are released quickly and safely without manual intervention.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Together, they make the development process &lt;strong&gt;fast, reliable, and transparent&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-how-does-it-work&#34;&gt;🔄 How does it work?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;👩‍💻 A developer pushes code to a repository (e.g., GitHub).&lt;/li&gt;
&lt;li&gt;🤖 The CI process automatically starts:
&lt;ul&gt;
&lt;li&gt;building the project;&lt;/li&gt;
&lt;li&gt;running tests;&lt;/li&gt;
&lt;li&gt;checking code style and security.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;✅ If everything passes — the CD stage begins:
&lt;ul&gt;
&lt;li&gt;a new version is deployed to a test or production server;&lt;/li&gt;
&lt;li&gt;stakeholders are notified (e.g., via Telegram, Slack).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-cicd-tools&#34;&gt;🛠 CI/CD Tools&lt;/h3&gt;
&lt;p&gt;Here are some popular CI/CD tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GitHub Actions&lt;/strong&gt; — built-in CI/CD tool for GitHub, easy to set up using YAML files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitLab CI&lt;/strong&gt; — GitLab&amp;rsquo;s flexible and powerful alternative.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jenkins&lt;/strong&gt; — highly customizable with a wide range of plugins, but requires manual setup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CircleCI&lt;/strong&gt;, &lt;strong&gt;Travis CI&lt;/strong&gt;, &lt;strong&gt;Bitbucket Pipelines&lt;/strong&gt; — also widely used among developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-why-does-it-matter&#34;&gt;🧠 Why does it matter?&lt;/h3&gt;
&lt;p&gt;CI/CD isn&amp;rsquo;t just a trend — it’s &lt;strong&gt;foundational to modern software development&lt;/strong&gt;. Here&amp;rsquo;s what it offers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast code validation and feedback&lt;/li&gt;
&lt;li&gt;Early bug detection&lt;/li&gt;
&lt;li&gt;Fewer merge conflicts&lt;/li&gt;
&lt;li&gt;Automation of repetitive tasks&lt;/li&gt;
&lt;li&gt;Faster feature delivery to users&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-how-to-start-as-a-student&#34;&gt;🎓 How to start as a student?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re just beginning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a simple Python or web project on GitHub.&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;.github/workflows/main.yml&lt;/code&gt; file to define your build and test steps.&lt;/li&gt;
&lt;li&gt;Enable GitHub Actions — and watch your code get checked automatically!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sample for Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Python CI&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;push]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Set up Python&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/setup-python@v4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;python-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;3.10&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Install dependencies&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pip install -r requirements.txt&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Run tests&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pytest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Week 1</title>
      <link>https://ldlidzhieva.github.io/en/post/01/</link>
      <pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate>
      <guid>https://ldlidzhieva.github.io/en/post/01/</guid>
      <description>&lt;h2 id=&#34;-study-week-may-2531&#34;&gt;📚 Study Week: May 25–31&lt;/h2&gt;
&lt;p&gt;This week I passed my first exam of the session — &lt;strong&gt;Programming&lt;/strong&gt;. It was a bit nerve-wracking, but preparation really helped. We focused on solving problems with lists, dictionaries, and basic algorithms.&lt;/p&gt;
&lt;p&gt;✏️ What came in handy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;revisiting loops and conditionals;&lt;/li&gt;
&lt;li&gt;handling errors using &lt;code&gt;try-except&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;testing with simple unit tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last year&amp;rsquo;s exam papers and task discussions with the instructor were incredibly helpful. I’m already starting to feel more confident in Python 💻&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
